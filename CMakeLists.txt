cmake_minimum_required(VERSION 3.14)

# cmake only includes targets to do coverage
project(winasio-rs LANGUAGES)

find_program(cargo_exe cargo
REQUIRED
)

# extract test executable name, compiled from tests folder
execute_process(
  COMMAND powershell.exe -Command "$env:RUSTFLAGS='-C instrument-coverage'; 
  (& \"${cargo_exe}\" test --test winhttp --no-run *>&1) | ForEach-Object ToString"
  OUTPUT_VARIABLE _test_target
  COMMAND_ERROR_IS_FATAL ANY
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)
message(STATUS "Using test exe ${_test_target}")
string(REGEX MATCH "target[\\].*\.exe" Target_Var "${_test_target}")
message(STATUS "Cmake target test ${Target_Var}")

# extract test executable name for lib package, compiled from src folder
execute_process(
  COMMAND powershell.exe -Command "$env:RUSTFLAGS='-C instrument-coverage'; 
  (& \"${cargo_exe}\" test --lib --no-run *>&1) | ForEach-Object ToString"
  OUTPUT_VARIABLE _test_lib_target
  COMMAND_ERROR_IS_FATAL ANY
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)
message(STATUS "Using lib test exe ${_test_lib_target}")
string(REGEX MATCH "target[\\].*\.exe" Lib_Target_Var "${_test_lib_target}")
message(STATUS "Cmake target lib test ${Lib_Target_Var}")

# remove profraw file generated during compiling
execute_process(
  COMMAND powershell.exe -Command "Remove-Item * -Include *.profraw"
  COMMAND_ERROR_IS_FATAL ANY
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

# run lib test
add_custom_command(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/lib.profraw
  # remove old data
  # COMMAND powershell.exe -Command "Remove-Item * -Include *.profraw"
  COMMAND powershell.exe -Command "$env:RUST_BACKTRACE=1; ${Lib_Target_Var} --nocapture"
  COMMAND powershell.exe -Command "Get-ChildItem default_*.profraw | ForEach-Object {Rename-Item -Path $_.Name -NewName lib.profraw}"
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

# run tests with name contains "test"
add_custom_command(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/tests.profraw
  # remove old data
  # COMMAND powershell.exe -Command "Remove-Item * -Include *.profraw"
  COMMAND powershell.exe -Command "$env:RUST_BACKTRACE=1; ${Target_Var} --nocapture"
  COMMAND powershell.exe -Command "Get-ChildItem default_*.profraw | ForEach-Object {Rename-Item -Path $_.Name -NewName tests.profraw}"
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  # DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib.profraw # make sure public test runs after lib test
)

add_custom_target(cov_winhttp
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/tests.profraw
)

add_custom_target(cov_lib
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lib.profraw
)

add_custom_target(cov_clean
  COMMAND powershell.exe -Command "Remove-Item * -Include *.profraw"
  COMMAND powershell.exe -Command "Remove-Item * -Include *.profdata"
  COMMAND powershell.exe -Command "Remove-Item * -Include *.xml"
  COMMAND powershell.exe -Command "Remove-Item * -Include coverage.*"
  COMMAND powershell.exe -Command "Remove-Item * -Include summary.txt"
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

find_program(llvm_profdata_exe llvm-profdata
REQUIRED
)

add_custom_command(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/winio.profdata
  COMMAND powershell.exe -Command "& \'${llvm_profdata_exe}\' merge -sparse *.profraw -o winio.profdata"
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/tests.profraw 
          ${CMAKE_CURRENT_SOURCE_DIR}/lib.profraw
)

find_program(llvm_cov_exe llvm-cov
REQUIRED
)

# add_custom_command(
#   OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/coverage.txt
#   COMMAND ${llvm_cov_exe} show 
#   --ignore-filename-regex="\\\\.cargo\\\\registry" 
#   --instr-profile=winio.profdata 
#   --format text
#   --object "${Target_Var}" > report.txt
#   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/winio.profdata
#   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
# )

# TODO: coverage is generated by not readable by codecov

add_custom_command(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/summary.txt
  COMMAND ${llvm_cov_exe} report 
  --ignore-filename-regex="\\\\.cargo\\\\registry" 
  --ignore-filename-regex="\\\\rustc" 
  --instr-profile=winio.profdata 
  --format text
  --object "${Target_Var}"
  --object "${Lib_Target_Var}" > summary.txt
  COMMAND type summary.txt
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/winio.profdata
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_command(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/coverage.txt
  COMMAND ${llvm_cov_exe} show 
  --ignore-filename-regex="\\\\.cargo\\\\registry" 
  --ignore-filename-regex="\\\\rustc" 
  --instr-profile=winio.profdata 
  --format text
  --show-instantiations --show-line-counts-or-regions
  --Xdemangler=rustfilt
  --object "${Target_Var}"
  --object "${Lib_Target_Var}" > coverage.txt
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/winio.profdata
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_command(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/coverage.json
  COMMAND ${llvm_cov_exe} export
  --ignore-filename-regex="\\\\.cargo\\\\registry" 
  --ignore-filename-regex="\\\\rustc" 
  --instr-profile=winio.profdata 
  --Xdemangler=rustfilt
  --object "${Target_Var}"
  --object "${Lib_Target_Var}" > coverage.json
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/winio.profdata
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(cov_all
  DEPENDS 
    cov_clean
    ${CMAKE_CURRENT_SOURCE_DIR}/coverage.txt 
    ${CMAKE_CURRENT_SOURCE_DIR}/summary.txt
    ${CMAKE_CURRENT_SOURCE_DIR}/coverage.json
)

